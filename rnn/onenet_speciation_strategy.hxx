#ifndef EXAMM_ONENET_SPECIATION_STRATEGY_HXX
#define EXAMM_ONENET_SPECIATION_STRATEGY_HXX

#include <functional>
using std::function;

#include <random>
using std::minstd_rand0;
using std::uniform_real_distribution;


#include <string>
using std::string;

#include "population.hxx"
#include "rnn_genome.hxx"
#include "speciation_strategy.hxx"

class OneNetSpeciationStrategy : public SpeciationStrategy {
    private:

        int32_t elite_population_size; /**< the maximum number of genomes in an population. */

        int32_t generation_size;
        
        double mutation_rate; /**< How frequently to do mutations. Note that mutation_rate + intra_population_crossover_rate + inter_population_crossover_rate should equal 1, if not they will be scaled down such that they do. */
        double crossover_rate;

        int32_t generated_genomes; /**< How many genomes have been generated by this speciation strategy. */
        int32_t evaluated_genomes; /**< How many genomes have been inserted into this speciatoin strategy. */

        RNN_Genome *seed_genome; /**< keep a reference to the seed genome so we can re-use it across populations and not duplicate innovation numbers. */

        bool seed_genome_was_minimal; /**< is true if we passed in a minimal genome (i.e., are not using transfer learning) */

        Population *Elite_population;
        Population *Trained_population;
        Population *Generated_population;

        RNN_Genome* global_best_genome;
        double global_best_fitness;

        int32_t generation;

    public:
        //static void register_command_line_arguments();
        //static OneNetSpeciationStrategy* generate_from_command_line();
        const static int32_t GENERATED = 0;
        const static int32_t TRAINED = 1;
        const static int32_t ELITE = 2;
        /**
         * Creates a new OneNetSpeciationStrategy.
         *
         * \param number_of_populations specifies how many populations it will us e
         * \param max_population_size specifies the maximum number of gneomes in an population
         */
        OneNetSpeciationStrategy(int32_t _elite_population_size, int32_t _generation_size,
                                double _mutation_rate, double _crossover_rate, RNN_Genome *_seed_genome,
                                bool _seed_genome_was_minimal);


        /**
         * \return the number of generated genomes.
         */
        int32_t get_generated_genomes() const;

        /**
         * \return the number of inserted genomes.
         */
        int32_t get_evaluated_genomes() const;

        /**
         * Gets the fitness of the best genome of all the populations
         * \return the best fitness over all populations
         */
        double get_best_fitness();

        /**
         * Gets the fitness of the worst genome of all the populations
         * \return the worst fitness over all populations
         */
        double get_worst_fitness();

        /**
         * Gets the best genome of all the populations
         * \return the best genome of all populations or NULL if no genomes have yet been inserted
         */
        RNN_Genome* get_best_genome();

        /**
         * Gets the the worst genome of all the populations
         * \return the worst genome of all populations or NULL if no genomes have yet been inserted
         */
        RNN_Genome* get_worst_genome();

        /**
         *  \return true if all the populations are full
         */
        bool populations_full() const;

        int32_t insert_genome(RNN_Genome* genome);

        RNN_Genome* generate_genome(uniform_real_distribution<double> &rng_0_1, minstd_rand0 &generator, function<void (int32_t, RNN_Genome*)> &mutate,function<RNN_Genome* (RNN_Genome*, RNN_Genome *)> &crossover, int32_t number_stir_mutations);

        RNN_Genome* generate_for_filled_population(uniform_real_distribution<double> &rng_0_1, minstd_rand0 &generator, function<void (int32_t, RNN_Genome*)> &mutate, function<RNN_Genome* (RNN_Genome*, RNN_Genome *)> &crossover);
        /**
         * Prints out all the population's populations
         *
         * \param indent is how much to indent what is printed out
         */
        void print(string indent = "") const;

        /**
         * Gets speciation strategy information headers for logs
         */
        string get_strategy_information_headers() const;

        /**
         * Gets speciation strategy information values for logs
         */
        string get_strategy_information_values() const;

        RNN_Genome* get_global_best_genome();

        void finalize_generation(const vector< vector< vector<double> > > &validation_input, const vector< vector< vector<double> > > &validation_output, const vector< vector< vector<double> > > &test_input, const vector< vector< vector<double> > > &test_output, TimeSeriesSets *time_series_sets, string result_dir);

        void evaluate_elite_population(const vector< vector< vector<double> > > &validation_input, const vector< vector< vector<double> > > &validation_output);
        void select_elite_population();
        void make_online_predictions(const vector< vector< vector<double> > > &test_input, const vector< vector< vector<double> > > &test_output);
        void clear_population();
};


#endif
